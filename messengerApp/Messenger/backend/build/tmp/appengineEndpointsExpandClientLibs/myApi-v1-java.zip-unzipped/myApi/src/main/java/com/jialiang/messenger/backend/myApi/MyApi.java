/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * (build: 2016-05-27 16:00:31 UTC)
 * on 2016-07-24 at 03:24:57 UTC 
 * Modify at your own risk.
 */

package com.jialiang.messenger.backend.myApi;

/**
 * Service definition for MyApi (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link MyApiRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class MyApi extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.22.0 of the myApi library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://myApplicationId.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "myApi/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public MyApi(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  MyApi(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * Create a request for the method "checkmessages".
   *
   * This request holds the parameters needed by the myApi server.  After setting any optional
   * parameters, call the {@link Checkmessages#execute()} method to invoke the remote operation.
   *
   * @param username
   * @return the request
   */
  public Checkmessages checkmessages(java.lang.String username) throws java.io.IOException {
    Checkmessages result = new Checkmessages(username);
    initialize(result);
    return result;
  }

  public class Checkmessages extends MyApiRequest<com.jialiang.messenger.backend.myApi.model.MyBean> {

    private static final String REST_PATH = "checkMessages/{username}";

    /**
     * Create a request for the method "checkmessages".
     *
     * This request holds the parameters needed by the the myApi server.  After setting any optional
     * parameters, call the {@link Checkmessages#execute()} method to invoke the remote operation. <p>
     * {@link Checkmessages#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientR
     * equest)} must be called to initialize this instance immediately after invoking the constructor.
     * </p>
     *
     * @param username
     * @since 1.13
     */
    protected Checkmessages(java.lang.String username) {
      super(MyApi.this, "POST", REST_PATH, null, com.jialiang.messenger.backend.myApi.model.MyBean.class);
      this.username = com.google.api.client.util.Preconditions.checkNotNull(username, "Required parameter username must be specified.");
    }

    @Override
    public Checkmessages setAlt(java.lang.String alt) {
      return (Checkmessages) super.setAlt(alt);
    }

    @Override
    public Checkmessages setFields(java.lang.String fields) {
      return (Checkmessages) super.setFields(fields);
    }

    @Override
    public Checkmessages setKey(java.lang.String key) {
      return (Checkmessages) super.setKey(key);
    }

    @Override
    public Checkmessages setOauthToken(java.lang.String oauthToken) {
      return (Checkmessages) super.setOauthToken(oauthToken);
    }

    @Override
    public Checkmessages setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Checkmessages) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Checkmessages setQuotaUser(java.lang.String quotaUser) {
      return (Checkmessages) super.setQuotaUser(quotaUser);
    }

    @Override
    public Checkmessages setUserIp(java.lang.String userIp) {
      return (Checkmessages) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String username;

    /**

     */
    public java.lang.String getUsername() {
      return username;
    }

    public Checkmessages setUsername(java.lang.String username) {
      this.username = username;
      return this;
    }

    @Override
    public Checkmessages set(String parameterName, Object value) {
      return (Checkmessages) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "friendaccept".
   *
   * This request holds the parameters needed by the myApi server.  After setting any optional
   * parameters, call the {@link Friendaccept#execute()} method to invoke the remote operation.
   *
   * @param username
   * @param password
   * @param requester
   * @param answer
   * @return the request
   */
  public Friendaccept friendaccept(java.lang.String username, java.lang.String password, java.lang.String requester, java.lang.String answer) throws java.io.IOException {
    Friendaccept result = new Friendaccept(username, password, requester, answer);
    initialize(result);
    return result;
  }

  public class Friendaccept extends MyApiRequest<com.jialiang.messenger.backend.myApi.model.MyBean> {

    private static final String REST_PATH = "friendAccept/{username}/{password}/{requester}/{answer}";

    /**
     * Create a request for the method "friendaccept".
     *
     * This request holds the parameters needed by the the myApi server.  After setting any optional
     * parameters, call the {@link Friendaccept#execute()} method to invoke the remote operation. <p>
     * {@link
     * Friendaccept#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param username
     * @param password
     * @param requester
     * @param answer
     * @since 1.13
     */
    protected Friendaccept(java.lang.String username, java.lang.String password, java.lang.String requester, java.lang.String answer) {
      super(MyApi.this, "POST", REST_PATH, null, com.jialiang.messenger.backend.myApi.model.MyBean.class);
      this.username = com.google.api.client.util.Preconditions.checkNotNull(username, "Required parameter username must be specified.");
      this.password = com.google.api.client.util.Preconditions.checkNotNull(password, "Required parameter password must be specified.");
      this.requester = com.google.api.client.util.Preconditions.checkNotNull(requester, "Required parameter requester must be specified.");
      this.answer = com.google.api.client.util.Preconditions.checkNotNull(answer, "Required parameter answer must be specified.");
    }

    @Override
    public Friendaccept setAlt(java.lang.String alt) {
      return (Friendaccept) super.setAlt(alt);
    }

    @Override
    public Friendaccept setFields(java.lang.String fields) {
      return (Friendaccept) super.setFields(fields);
    }

    @Override
    public Friendaccept setKey(java.lang.String key) {
      return (Friendaccept) super.setKey(key);
    }

    @Override
    public Friendaccept setOauthToken(java.lang.String oauthToken) {
      return (Friendaccept) super.setOauthToken(oauthToken);
    }

    @Override
    public Friendaccept setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Friendaccept) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Friendaccept setQuotaUser(java.lang.String quotaUser) {
      return (Friendaccept) super.setQuotaUser(quotaUser);
    }

    @Override
    public Friendaccept setUserIp(java.lang.String userIp) {
      return (Friendaccept) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String username;

    /**

     */
    public java.lang.String getUsername() {
      return username;
    }

    public Friendaccept setUsername(java.lang.String username) {
      this.username = username;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String password;

    /**

     */
    public java.lang.String getPassword() {
      return password;
    }

    public Friendaccept setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String requester;

    /**

     */
    public java.lang.String getRequester() {
      return requester;
    }

    public Friendaccept setRequester(java.lang.String requester) {
      this.requester = requester;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String answer;

    /**

     */
    public java.lang.String getAnswer() {
      return answer;
    }

    public Friendaccept setAnswer(java.lang.String answer) {
      this.answer = answer;
      return this;
    }

    @Override
    public Friendaccept set(String parameterName, Object value) {
      return (Friendaccept) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getfriendlist".
   *
   * This request holds the parameters needed by the myApi server.  After setting any optional
   * parameters, call the {@link Getfriendlist#execute()} method to invoke the remote operation.
   *
   * @param password
   * @param username
   * @return the request
   */
  public Getfriendlist getfriendlist(java.lang.String password, java.lang.String username) throws java.io.IOException {
    Getfriendlist result = new Getfriendlist(password, username);
    initialize(result);
    return result;
  }

  public class Getfriendlist extends MyApiRequest<com.jialiang.messenger.backend.myApi.model.MyBean> {

    private static final String REST_PATH = "getfriendlist";

    /**
     * Create a request for the method "getfriendlist".
     *
     * This request holds the parameters needed by the the myApi server.  After setting any optional
     * parameters, call the {@link Getfriendlist#execute()} method to invoke the remote operation. <p>
     * {@link Getfriendlist#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientR
     * equest)} must be called to initialize this instance immediately after invoking the constructor.
     * </p>
     *
     * @param password
     * @param username
     * @since 1.13
     */
    protected Getfriendlist(java.lang.String password, java.lang.String username) {
      super(MyApi.this, "GET", REST_PATH, null, com.jialiang.messenger.backend.myApi.model.MyBean.class);
      this.password = com.google.api.client.util.Preconditions.checkNotNull(password, "Required parameter password must be specified.");
      this.username = com.google.api.client.util.Preconditions.checkNotNull(username, "Required parameter username must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public Getfriendlist setAlt(java.lang.String alt) {
      return (Getfriendlist) super.setAlt(alt);
    }

    @Override
    public Getfriendlist setFields(java.lang.String fields) {
      return (Getfriendlist) super.setFields(fields);
    }

    @Override
    public Getfriendlist setKey(java.lang.String key) {
      return (Getfriendlist) super.setKey(key);
    }

    @Override
    public Getfriendlist setOauthToken(java.lang.String oauthToken) {
      return (Getfriendlist) super.setOauthToken(oauthToken);
    }

    @Override
    public Getfriendlist setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Getfriendlist) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Getfriendlist setQuotaUser(java.lang.String quotaUser) {
      return (Getfriendlist) super.setQuotaUser(quotaUser);
    }

    @Override
    public Getfriendlist setUserIp(java.lang.String userIp) {
      return (Getfriendlist) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String password;

    /**

     */
    public java.lang.String getPassword() {
      return password;
    }

    public Getfriendlist setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String username;

    /**

     */
    public java.lang.String getUsername() {
      return username;
    }

    public Getfriendlist setUsername(java.lang.String username) {
      this.username = username;
      return this;
    }

    @Override
    public Getfriendlist set(String parameterName, Object value) {
      return (Getfriendlist) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getrequestlist".
   *
   * This request holds the parameters needed by the myApi server.  After setting any optional
   * parameters, call the {@link Getrequestlist#execute()} method to invoke the remote operation.
   *
   * @param username
   * @param password
   * @return the request
   */
  public Getrequestlist getrequestlist(java.lang.String username, java.lang.String password) throws java.io.IOException {
    Getrequestlist result = new Getrequestlist(username, password);
    initialize(result);
    return result;
  }

  public class Getrequestlist extends MyApiRequest<com.jialiang.messenger.backend.myApi.model.MyBean> {

    private static final String REST_PATH = "mybean/{username}/{password}";

    /**
     * Create a request for the method "getrequestlist".
     *
     * This request holds the parameters needed by the the myApi server.  After setting any optional
     * parameters, call the {@link Getrequestlist#execute()} method to invoke the remote operation.
     * <p> {@link Getrequestlist#initialize(com.google.api.client.googleapis.services.AbstractGoogleCl
     * ientRequest)} must be called to initialize this instance immediately after invoking the
     * constructor. </p>
     *
     * @param username
     * @param password
     * @since 1.13
     */
    protected Getrequestlist(java.lang.String username, java.lang.String password) {
      super(MyApi.this, "GET", REST_PATH, null, com.jialiang.messenger.backend.myApi.model.MyBean.class);
      this.username = com.google.api.client.util.Preconditions.checkNotNull(username, "Required parameter username must be specified.");
      this.password = com.google.api.client.util.Preconditions.checkNotNull(password, "Required parameter password must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public Getrequestlist setAlt(java.lang.String alt) {
      return (Getrequestlist) super.setAlt(alt);
    }

    @Override
    public Getrequestlist setFields(java.lang.String fields) {
      return (Getrequestlist) super.setFields(fields);
    }

    @Override
    public Getrequestlist setKey(java.lang.String key) {
      return (Getrequestlist) super.setKey(key);
    }

    @Override
    public Getrequestlist setOauthToken(java.lang.String oauthToken) {
      return (Getrequestlist) super.setOauthToken(oauthToken);
    }

    @Override
    public Getrequestlist setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Getrequestlist) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Getrequestlist setQuotaUser(java.lang.String quotaUser) {
      return (Getrequestlist) super.setQuotaUser(quotaUser);
    }

    @Override
    public Getrequestlist setUserIp(java.lang.String userIp) {
      return (Getrequestlist) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String username;

    /**

     */
    public java.lang.String getUsername() {
      return username;
    }

    public Getrequestlist setUsername(java.lang.String username) {
      this.username = username;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String password;

    /**

     */
    public java.lang.String getPassword() {
      return password;
    }

    public Getrequestlist setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    @Override
    public Getrequestlist set(String parameterName, Object value) {
      return (Getrequestlist) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "register".
   *
   * This request holds the parameters needed by the myApi server.  After setting any optional
   * parameters, call the {@link Register#execute()} method to invoke the remote operation.
   *
   * @param username
   * @param password
   * @param email
   * @return the request
   */
  public Register register(java.lang.String username, java.lang.String password, java.lang.String email) throws java.io.IOException {
    Register result = new Register(username, password, email);
    initialize(result);
    return result;
  }

  public class Register extends MyApiRequest<com.jialiang.messenger.backend.myApi.model.MyBean> {

    private static final String REST_PATH = "register/{username}/{password}/{email}";

    /**
     * Create a request for the method "register".
     *
     * This request holds the parameters needed by the the myApi server.  After setting any optional
     * parameters, call the {@link Register#execute()} method to invoke the remote operation. <p>
     * {@link
     * Register#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param username
     * @param password
     * @param email
     * @since 1.13
     */
    protected Register(java.lang.String username, java.lang.String password, java.lang.String email) {
      super(MyApi.this, "POST", REST_PATH, null, com.jialiang.messenger.backend.myApi.model.MyBean.class);
      this.username = com.google.api.client.util.Preconditions.checkNotNull(username, "Required parameter username must be specified.");
      this.password = com.google.api.client.util.Preconditions.checkNotNull(password, "Required parameter password must be specified.");
      this.email = com.google.api.client.util.Preconditions.checkNotNull(email, "Required parameter email must be specified.");
    }

    @Override
    public Register setAlt(java.lang.String alt) {
      return (Register) super.setAlt(alt);
    }

    @Override
    public Register setFields(java.lang.String fields) {
      return (Register) super.setFields(fields);
    }

    @Override
    public Register setKey(java.lang.String key) {
      return (Register) super.setKey(key);
    }

    @Override
    public Register setOauthToken(java.lang.String oauthToken) {
      return (Register) super.setOauthToken(oauthToken);
    }

    @Override
    public Register setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Register) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Register setQuotaUser(java.lang.String quotaUser) {
      return (Register) super.setQuotaUser(quotaUser);
    }

    @Override
    public Register setUserIp(java.lang.String userIp) {
      return (Register) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String username;

    /**

     */
    public java.lang.String getUsername() {
      return username;
    }

    public Register setUsername(java.lang.String username) {
      this.username = username;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String password;

    /**

     */
    public java.lang.String getPassword() {
      return password;
    }

    public Register setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String email;

    /**

     */
    public java.lang.String getEmail() {
      return email;
    }

    public Register setEmail(java.lang.String email) {
      this.email = email;
      return this;
    }

    @Override
    public Register set(String parameterName, Object value) {
      return (Register) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "sayHi".
   *
   * This request holds the parameters needed by the myApi server.  After setting any optional
   * parameters, call the {@link SayHi#execute()} method to invoke the remote operation.
   *
   * @param name
   * @return the request
   */
  public SayHi sayHi(java.lang.String name) throws java.io.IOException {
    SayHi result = new SayHi(name);
    initialize(result);
    return result;
  }

  public class SayHi extends MyApiRequest<com.jialiang.messenger.backend.myApi.model.MyBean> {

    private static final String REST_PATH = "sayHi/{name}";

    /**
     * Create a request for the method "sayHi".
     *
     * This request holds the parameters needed by the the myApi server.  After setting any optional
     * parameters, call the {@link SayHi#execute()} method to invoke the remote operation. <p> {@link
     * SayHi#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
     * be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param name
     * @since 1.13
     */
    protected SayHi(java.lang.String name) {
      super(MyApi.this, "POST", REST_PATH, null, com.jialiang.messenger.backend.myApi.model.MyBean.class);
      this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
    }

    @Override
    public SayHi setAlt(java.lang.String alt) {
      return (SayHi) super.setAlt(alt);
    }

    @Override
    public SayHi setFields(java.lang.String fields) {
      return (SayHi) super.setFields(fields);
    }

    @Override
    public SayHi setKey(java.lang.String key) {
      return (SayHi) super.setKey(key);
    }

    @Override
    public SayHi setOauthToken(java.lang.String oauthToken) {
      return (SayHi) super.setOauthToken(oauthToken);
    }

    @Override
    public SayHi setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (SayHi) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public SayHi setQuotaUser(java.lang.String quotaUser) {
      return (SayHi) super.setQuotaUser(quotaUser);
    }

    @Override
    public SayHi setUserIp(java.lang.String userIp) {
      return (SayHi) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String name;

    /**

     */
    public java.lang.String getName() {
      return name;
    }

    public SayHi setName(java.lang.String name) {
      this.name = name;
      return this;
    }

    @Override
    public SayHi set(String parameterName, Object value) {
      return (SayHi) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "sendfriendrequest".
   *
   * This request holds the parameters needed by the myApi server.  After setting any optional
   * parameters, call the {@link Sendfriendrequest#execute()} method to invoke the remote operation.
   *
   * @param username
   * @param password
   * @param friendinfo
   * @return the request
   */
  public Sendfriendrequest sendfriendrequest(java.lang.String username, java.lang.String password, java.lang.String friendinfo) throws java.io.IOException {
    Sendfriendrequest result = new Sendfriendrequest(username, password, friendinfo);
    initialize(result);
    return result;
  }

  public class Sendfriendrequest extends MyApiRequest<com.jialiang.messenger.backend.myApi.model.MyBean> {

    private static final String REST_PATH = "sendFriendRequest/{username}/{password}/{friendinfo}";

    /**
     * Create a request for the method "sendfriendrequest".
     *
     * This request holds the parameters needed by the the myApi server.  After setting any optional
     * parameters, call the {@link Sendfriendrequest#execute()} method to invoke the remote operation.
     * <p> {@link Sendfriendrequest#initialize(com.google.api.client.googleapis.services.AbstractGoogl
     * eClientRequest)} must be called to initialize this instance immediately after invoking the
     * constructor. </p>
     *
     * @param username
     * @param password
     * @param friendinfo
     * @since 1.13
     */
    protected Sendfriendrequest(java.lang.String username, java.lang.String password, java.lang.String friendinfo) {
      super(MyApi.this, "POST", REST_PATH, null, com.jialiang.messenger.backend.myApi.model.MyBean.class);
      this.username = com.google.api.client.util.Preconditions.checkNotNull(username, "Required parameter username must be specified.");
      this.password = com.google.api.client.util.Preconditions.checkNotNull(password, "Required parameter password must be specified.");
      this.friendinfo = com.google.api.client.util.Preconditions.checkNotNull(friendinfo, "Required parameter friendinfo must be specified.");
    }

    @Override
    public Sendfriendrequest setAlt(java.lang.String alt) {
      return (Sendfriendrequest) super.setAlt(alt);
    }

    @Override
    public Sendfriendrequest setFields(java.lang.String fields) {
      return (Sendfriendrequest) super.setFields(fields);
    }

    @Override
    public Sendfriendrequest setKey(java.lang.String key) {
      return (Sendfriendrequest) super.setKey(key);
    }

    @Override
    public Sendfriendrequest setOauthToken(java.lang.String oauthToken) {
      return (Sendfriendrequest) super.setOauthToken(oauthToken);
    }

    @Override
    public Sendfriendrequest setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Sendfriendrequest) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Sendfriendrequest setQuotaUser(java.lang.String quotaUser) {
      return (Sendfriendrequest) super.setQuotaUser(quotaUser);
    }

    @Override
    public Sendfriendrequest setUserIp(java.lang.String userIp) {
      return (Sendfriendrequest) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String username;

    /**

     */
    public java.lang.String getUsername() {
      return username;
    }

    public Sendfriendrequest setUsername(java.lang.String username) {
      this.username = username;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String password;

    /**

     */
    public java.lang.String getPassword() {
      return password;
    }

    public Sendfriendrequest setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String friendinfo;

    /**

     */
    public java.lang.String getFriendinfo() {
      return friendinfo;
    }

    public Sendfriendrequest setFriendinfo(java.lang.String friendinfo) {
      this.friendinfo = friendinfo;
      return this;
    }

    @Override
    public Sendfriendrequest set(String parameterName, Object value) {
      return (Sendfriendrequest) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "sendmessage".
   *
   * This request holds the parameters needed by the myApi server.  After setting any optional
   * parameters, call the {@link Sendmessage#execute()} method to invoke the remote operation.
   *
   * @param username
   * @param password
   * @param receiverkey
   * @param message
   * @return the request
   */
  public Sendmessage sendmessage(java.lang.String username, java.lang.String password, java.lang.String receiverkey, java.lang.String message) throws java.io.IOException {
    Sendmessage result = new Sendmessage(username, password, receiverkey, message);
    initialize(result);
    return result;
  }

  public class Sendmessage extends MyApiRequest<com.jialiang.messenger.backend.myApi.model.MyBean> {

    private static final String REST_PATH = "sendMessage/{username}/{password}/{receiverkey}/{message}";

    /**
     * Create a request for the method "sendmessage".
     *
     * This request holds the parameters needed by the the myApi server.  After setting any optional
     * parameters, call the {@link Sendmessage#execute()} method to invoke the remote operation. <p>
     * {@link
     * Sendmessage#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param username
     * @param password
     * @param receiverkey
     * @param message
     * @since 1.13
     */
    protected Sendmessage(java.lang.String username, java.lang.String password, java.lang.String receiverkey, java.lang.String message) {
      super(MyApi.this, "POST", REST_PATH, null, com.jialiang.messenger.backend.myApi.model.MyBean.class);
      this.username = com.google.api.client.util.Preconditions.checkNotNull(username, "Required parameter username must be specified.");
      this.password = com.google.api.client.util.Preconditions.checkNotNull(password, "Required parameter password must be specified.");
      this.receiverkey = com.google.api.client.util.Preconditions.checkNotNull(receiverkey, "Required parameter receiverkey must be specified.");
      this.message = com.google.api.client.util.Preconditions.checkNotNull(message, "Required parameter message must be specified.");
    }

    @Override
    public Sendmessage setAlt(java.lang.String alt) {
      return (Sendmessage) super.setAlt(alt);
    }

    @Override
    public Sendmessage setFields(java.lang.String fields) {
      return (Sendmessage) super.setFields(fields);
    }

    @Override
    public Sendmessage setKey(java.lang.String key) {
      return (Sendmessage) super.setKey(key);
    }

    @Override
    public Sendmessage setOauthToken(java.lang.String oauthToken) {
      return (Sendmessage) super.setOauthToken(oauthToken);
    }

    @Override
    public Sendmessage setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Sendmessage) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Sendmessage setQuotaUser(java.lang.String quotaUser) {
      return (Sendmessage) super.setQuotaUser(quotaUser);
    }

    @Override
    public Sendmessage setUserIp(java.lang.String userIp) {
      return (Sendmessage) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String username;

    /**

     */
    public java.lang.String getUsername() {
      return username;
    }

    public Sendmessage setUsername(java.lang.String username) {
      this.username = username;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String password;

    /**

     */
    public java.lang.String getPassword() {
      return password;
    }

    public Sendmessage setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String receiverkey;

    /**

     */
    public java.lang.String getReceiverkey() {
      return receiverkey;
    }

    public Sendmessage setReceiverkey(java.lang.String receiverkey) {
      this.receiverkey = receiverkey;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String message;

    /**

     */
    public java.lang.String getMessage() {
      return message;
    }

    public Sendmessage setMessage(java.lang.String message) {
      this.message = message;
      return this;
    }

    @Override
    public Sendmessage set(String parameterName, Object value) {
      return (Sendmessage) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "signin".
   *
   * This request holds the parameters needed by the myApi server.  After setting any optional
   * parameters, call the {@link Signin#execute()} method to invoke the remote operation.
   *
   * @param username
   * @param password
   * @return the request
   */
  public Signin signin(java.lang.String username, java.lang.String password) throws java.io.IOException {
    Signin result = new Signin(username, password);
    initialize(result);
    return result;
  }

  public class Signin extends MyApiRequest<com.jialiang.messenger.backend.myApi.model.MyBean> {

    private static final String REST_PATH = "signIn/{username}/{password}";

    /**
     * Create a request for the method "signin".
     *
     * This request holds the parameters needed by the the myApi server.  After setting any optional
     * parameters, call the {@link Signin#execute()} method to invoke the remote operation. <p> {@link
     * Signin#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
     * be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param username
     * @param password
     * @since 1.13
     */
    protected Signin(java.lang.String username, java.lang.String password) {
      super(MyApi.this, "POST", REST_PATH, null, com.jialiang.messenger.backend.myApi.model.MyBean.class);
      this.username = com.google.api.client.util.Preconditions.checkNotNull(username, "Required parameter username must be specified.");
      this.password = com.google.api.client.util.Preconditions.checkNotNull(password, "Required parameter password must be specified.");
    }

    @Override
    public Signin setAlt(java.lang.String alt) {
      return (Signin) super.setAlt(alt);
    }

    @Override
    public Signin setFields(java.lang.String fields) {
      return (Signin) super.setFields(fields);
    }

    @Override
    public Signin setKey(java.lang.String key) {
      return (Signin) super.setKey(key);
    }

    @Override
    public Signin setOauthToken(java.lang.String oauthToken) {
      return (Signin) super.setOauthToken(oauthToken);
    }

    @Override
    public Signin setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Signin) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Signin setQuotaUser(java.lang.String quotaUser) {
      return (Signin) super.setQuotaUser(quotaUser);
    }

    @Override
    public Signin setUserIp(java.lang.String userIp) {
      return (Signin) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String username;

    /**

     */
    public java.lang.String getUsername() {
      return username;
    }

    public Signin setUsername(java.lang.String username) {
      this.username = username;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String password;

    /**

     */
    public java.lang.String getPassword() {
      return password;
    }

    public Signin setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    @Override
    public Signin set(String parameterName, Object value) {
      return (Signin) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "testing".
   *
   * This request holds the parameters needed by the myApi server.  After setting any optional
   * parameters, call the {@link Testing#execute()} method to invoke the remote operation.
   *
   * @param name
   * @return the request
   */
  public Testing testing(java.lang.String name) throws java.io.IOException {
    Testing result = new Testing(name);
    initialize(result);
    return result;
  }

  public class Testing extends MyApiRequest<com.jialiang.messenger.backend.myApi.model.MyBean> {

    private static final String REST_PATH = "testing/{name}";

    /**
     * Create a request for the method "testing".
     *
     * This request holds the parameters needed by the the myApi server.  After setting any optional
     * parameters, call the {@link Testing#execute()} method to invoke the remote operation. <p>
     * {@link
     * Testing#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
     * be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param name
     * @since 1.13
     */
    protected Testing(java.lang.String name) {
      super(MyApi.this, "POST", REST_PATH, null, com.jialiang.messenger.backend.myApi.model.MyBean.class);
      this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
    }

    @Override
    public Testing setAlt(java.lang.String alt) {
      return (Testing) super.setAlt(alt);
    }

    @Override
    public Testing setFields(java.lang.String fields) {
      return (Testing) super.setFields(fields);
    }

    @Override
    public Testing setKey(java.lang.String key) {
      return (Testing) super.setKey(key);
    }

    @Override
    public Testing setOauthToken(java.lang.String oauthToken) {
      return (Testing) super.setOauthToken(oauthToken);
    }

    @Override
    public Testing setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Testing) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Testing setQuotaUser(java.lang.String quotaUser) {
      return (Testing) super.setQuotaUser(quotaUser);
    }

    @Override
    public Testing setUserIp(java.lang.String userIp) {
      return (Testing) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String name;

    /**

     */
    public java.lang.String getName() {
      return name;
    }

    public Testing setName(java.lang.String name) {
      this.name = name;
      return this;
    }

    @Override
    public Testing set(String parameterName, Object value) {
      return (Testing) super.set(parameterName, value);
    }
  }

  /**
   * Builder for {@link MyApi}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link MyApi}. */
    @Override
    public MyApi build() {
      return new MyApi(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link MyApiRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setMyApiRequestInitializer(
        MyApiRequestInitializer myapiRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(myapiRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
